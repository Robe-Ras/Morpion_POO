require 'bundler'
Bundler.require



class Board
  attr_accessor :cases

  def initialize
    @cases = create_board
  end


  def create_board  # Je cr√©e la grille
    board = {}      # Je cr√©e un hash vide qui repr√©sente la grille
    ('A'..'C').each do |col| # Je cr√©e mes colonnes
      (1..3).each do |row|   # Je cr√©e mes rang√©es
        position = "#{col}#{row}" # Je cr√©e le combo chiffre/lettre qui repr√©sentera la position de la case (ex : A1, B2, C3)
        board[position] = BoardCase.new(position) # Je cr√©e une instance de BoardCase √† la position d√©fini et je l'ajoute dans le hash board (que j'utiliserai dans show.rb)
      end
    end
    board
  end


  def valid_move?(choice) # Je cr√©e la m√©thode valid_move pour rev√©rifier si le choix de la case est valide
    @cases[choice].value == " "
  end


  def play_turn(player) # Je cr√©e la m√©thode play_turn pour d√©finir le choix de case du joueur
    puts ""
    puts "#{player.name}, Choisis une case ? par exemple A1, B2, C3, etc..."
    choice = gets.chomp.upcase

    if valid_move?(choice) # Je cr√©e la m√©thode valid_move pour rev√©rifier si le choix de la case est valide et passer au tour suivant
      @cases[choice].value = player.symbol
    else
      puts ""
      puts "Choisis une case vide, imb√©cile ! üò†"
      play_turn(player) # permet de passer au tour suivant (def turn dans le fichier game.rb)
    end
  end


  def victory?   # Je cr√©e les combinaisons gagnantes pour v√©rifier si un joueur √† gagner la partie
    victory_combinations = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8],
      [0, 3, 6], [1, 4, 7], [2, 5, 8],
      [6, 4, 2], [0, 4, 8]
    ]

    victory_combinations.each do |combo|    # Je cr√©e une boucle √† partir des combinaisons gagnantes, avec comme variable combo qui repr√©sente chaque √©l√©ment
      values = combo.map { |index| @cases[@cases.keys[index]].value } # Je cr√©e un tableau values en utilisant .map, qui utilise chaque index de la combinaison pour acceder √† sa valeur correspondante dans @case et les stocker dans values
      return true if values.uniq.length == 1 && values[0] != " " # Je v√©rifie si toutes les valeurs dans values sont identiques (c'est-√†-dire qu'il y a une victoire) et que la premi√®re valeur n'est pas une case vide 
    end                                                          # true = combinaison gagnante trouv√©

    false
  end

end
